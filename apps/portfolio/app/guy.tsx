/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 ./character.glb -t --transform -s -k
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { AnimationClip } from "three";

type GLTFResult = GLTF & {
  nodes: {
    glassesRound: THREE.Mesh;
    characterMedium: THREE.SkinnedMesh;
    LeftFootCtrl: THREE.Bone;
    RightFootCtrl: THREE.Bone;
    HipsCtrl: THREE.Bone;
  };
  materials: {
    ["Blue 3"]: THREE.MeshStandardMaterial;
    skin: THREE.MeshStandardMaterial;
  };
  animations: GLTFActions[];
};

export type ActionName = "Idle" | "Run" | "Walk";
type GLTFActions = AnimationClip & Record<ActionName, THREE.AnimationAction>;

export function Model({
  action,
  fade,
  ...props
}: JSX.IntrinsicElements["group"] & { action: ActionName; fade: number }) {
  const group = useRef<THREE.Group>(null);
  const { nodes, materials, animations } = useGLTF(
    "/character-transformed.glb"
  ) as GLTFResult;
  const { actions } = useAnimations<GLTFActions>(animations, group);

  useEffect(() => {
    actions[action]
      ?.reset()
      .setEffectiveTimeScale(1)
      .setEffectiveWeight(1)
      .fadeIn(fade)
      .play();
    return () => {
      actions[action]?.fadeOut(fade);
    };
  }, [action, actions, fade]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Root">
          <primitive object={nodes.LeftFootCtrl} />
          <primitive object={nodes.RightFootCtrl} />
          <primitive object={nodes.HipsCtrl} />
          <skinnedMesh
            name="characterMedium"
            geometry={nodes.characterMedium.geometry}
            material={materials.skin}
            skeleton={nodes.characterMedium.skeleton}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/character-transformed.glb");
